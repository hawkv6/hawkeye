// Code generated by MockGen. DO NOT EDIT.
// Source: domain_path_request.go
//
// Generated by this command:
//
//	mockgen -source domain_path_request.go -destination domain_path_request_mock.go -package domain
//

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	api "github.com/hawkv6/hawkeye/pkg/api"
	gomock "go.uber.org/mock/gomock"
)

// MockPathRequest is a mock of PathRequest interface.
type MockPathRequest struct {
	ctrl     *gomock.Controller
	recorder *MockPathRequestMockRecorder
}

// MockPathRequestMockRecorder is the mock recorder for MockPathRequest.
type MockPathRequestMockRecorder struct {
	mock *MockPathRequest
}

// NewMockPathRequest creates a new mock instance.
func NewMockPathRequest(ctrl *gomock.Controller) *MockPathRequest {
	mock := &MockPathRequest{ctrl: ctrl}
	mock.recorder = &MockPathRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathRequest) EXPECT() *MockPathRequestMockRecorder {
	return m.recorder
}

// GetContext mocks base method.
func (m *MockPathRequest) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockPathRequestMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockPathRequest)(nil).GetContext))
}

// GetIntents mocks base method.
func (m *MockPathRequest) GetIntents() []Intent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntents")
	ret0, _ := ret[0].([]Intent)
	return ret0
}

// GetIntents indicates an expected call of GetIntents.
func (mr *MockPathRequestMockRecorder) GetIntents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntents", reflect.TypeOf((*MockPathRequest)(nil).GetIntents))
}

// GetIpv6DestinationAddress mocks base method.
func (m *MockPathRequest) GetIpv6DestinationAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpv6DestinationAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIpv6DestinationAddress indicates an expected call of GetIpv6DestinationAddress.
func (mr *MockPathRequestMockRecorder) GetIpv6DestinationAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpv6DestinationAddress", reflect.TypeOf((*MockPathRequest)(nil).GetIpv6DestinationAddress))
}

// GetIpv6SourceAddress mocks base method.
func (m *MockPathRequest) GetIpv6SourceAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpv6SourceAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIpv6SourceAddress indicates an expected call of GetIpv6SourceAddress.
func (mr *MockPathRequestMockRecorder) GetIpv6SourceAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpv6SourceAddress", reflect.TypeOf((*MockPathRequest)(nil).GetIpv6SourceAddress))
}

// GetStream mocks base method.
func (m *MockPathRequest) GetStream() api.IntentController_GetIntentPathServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStream")
	ret0, _ := ret[0].(api.IntentController_GetIntentPathServer)
	return ret0
}

// GetStream indicates an expected call of GetStream.
func (mr *MockPathRequestMockRecorder) GetStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStream", reflect.TypeOf((*MockPathRequest)(nil).GetStream))
}

// Serialize mocks base method.
func (m *MockPathRequest) Serialize() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize")
	ret0, _ := ret[0].(string)
	return ret0
}

// Serialize indicates an expected call of Serialize.
func (mr *MockPathRequestMockRecorder) Serialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockPathRequest)(nil).Serialize))
}
