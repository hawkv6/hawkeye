// Code generated by MockGen. DO NOT EDIT.
// Source: domain_path_result.go
//
// Generated by this command:
//
//	mockgen -source domain_path_result.go -destination domain_path_result_mock.go -package domain
//

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	api "github.com/hawkv6/hawkeye/pkg/api"
	graph "github.com/hawkv6/hawkeye/pkg/graph"
	gomock "go.uber.org/mock/gomock"
)

// MockPathResult is a mock of PathResult interface.
type MockPathResult struct {
	ctrl     *gomock.Controller
	recorder *MockPathResultMockRecorder
}

// MockPathResultMockRecorder is the mock recorder for MockPathResult.
type MockPathResultMockRecorder struct {
	mock *MockPathResult
}

// NewMockPathResult creates a new mock instance.
func NewMockPathResult(ctrl *gomock.Controller) *MockPathResult {
	mock := &MockPathResult{ctrl: ctrl}
	mock.recorder = &MockPathResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathResult) EXPECT() *MockPathResultMockRecorder {
	return m.recorder
}

// GetBottleneckEdge mocks base method.
func (m *MockPathResult) GetBottleneckEdge() graph.Edge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBottleneckEdge")
	ret0, _ := ret[0].(graph.Edge)
	return ret0
}

// GetBottleneckEdge indicates an expected call of GetBottleneckEdge.
func (mr *MockPathResultMockRecorder) GetBottleneckEdge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBottleneckEdge", reflect.TypeOf((*MockPathResult)(nil).GetBottleneckEdge))
}

// GetBottleneckValue mocks base method.
func (m *MockPathResult) GetBottleneckValue() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBottleneckValue")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetBottleneckValue indicates an expected call of GetBottleneckValue.
func (mr *MockPathResultMockRecorder) GetBottleneckValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBottleneckValue", reflect.TypeOf((*MockPathResult)(nil).GetBottleneckValue))
}

// GetContext mocks base method.
func (m *MockPathResult) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockPathResultMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockPathResult)(nil).GetContext))
}

// GetEdges mocks base method.
func (m *MockPathResult) GetEdges() []graph.Edge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEdges")
	ret0, _ := ret[0].([]graph.Edge)
	return ret0
}

// GetEdges indicates an expected call of GetEdges.
func (mr *MockPathResultMockRecorder) GetEdges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEdges", reflect.TypeOf((*MockPathResult)(nil).GetEdges))
}

// GetIntents mocks base method.
func (m *MockPathResult) GetIntents() []Intent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntents")
	ret0, _ := ret[0].([]Intent)
	return ret0
}

// GetIntents indicates an expected call of GetIntents.
func (mr *MockPathResultMockRecorder) GetIntents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntents", reflect.TypeOf((*MockPathResult)(nil).GetIntents))
}

// GetIpv6DestinationAddress mocks base method.
func (m *MockPathResult) GetIpv6DestinationAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpv6DestinationAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIpv6DestinationAddress indicates an expected call of GetIpv6DestinationAddress.
func (mr *MockPathResultMockRecorder) GetIpv6DestinationAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpv6DestinationAddress", reflect.TypeOf((*MockPathResult)(nil).GetIpv6DestinationAddress))
}

// GetIpv6SidAddresses mocks base method.
func (m *MockPathResult) GetIpv6SidAddresses() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpv6SidAddresses")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetIpv6SidAddresses indicates an expected call of GetIpv6SidAddresses.
func (mr *MockPathResultMockRecorder) GetIpv6SidAddresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpv6SidAddresses", reflect.TypeOf((*MockPathResult)(nil).GetIpv6SidAddresses))
}

// GetIpv6SourceAddress mocks base method.
func (m *MockPathResult) GetIpv6SourceAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpv6SourceAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIpv6SourceAddress indicates an expected call of GetIpv6SourceAddress.
func (mr *MockPathResultMockRecorder) GetIpv6SourceAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpv6SourceAddress", reflect.TypeOf((*MockPathResult)(nil).GetIpv6SourceAddress))
}

// GetRouterServiceMap mocks base method.
func (m *MockPathResult) GetRouterServiceMap() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterServiceMap")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetRouterServiceMap indicates an expected call of GetRouterServiceMap.
func (mr *MockPathResultMockRecorder) GetRouterServiceMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterServiceMap", reflect.TypeOf((*MockPathResult)(nil).GetRouterServiceMap))
}

// GetServiceSidList mocks base method.
func (m *MockPathResult) GetServiceSidList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceSidList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetServiceSidList indicates an expected call of GetServiceSidList.
func (mr *MockPathResultMockRecorder) GetServiceSidList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceSidList", reflect.TypeOf((*MockPathResult)(nil).GetServiceSidList))
}

// GetStream mocks base method.
func (m *MockPathResult) GetStream() api.IntentController_GetIntentPathServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStream")
	ret0, _ := ret[0].(api.IntentController_GetIntentPathServer)
	return ret0
}

// GetStream indicates an expected call of GetStream.
func (mr *MockPathResultMockRecorder) GetStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStream", reflect.TypeOf((*MockPathResult)(nil).GetStream))
}

// GetTotalCost mocks base method.
func (m *MockPathResult) GetTotalCost() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCost")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetTotalCost indicates an expected call of GetTotalCost.
func (mr *MockPathResultMockRecorder) GetTotalCost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCost", reflect.TypeOf((*MockPathResult)(nil).GetTotalCost))
}

// GetTotalDelay mocks base method.
func (m *MockPathResult) GetTotalDelay() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalDelay")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetTotalDelay indicates an expected call of GetTotalDelay.
func (mr *MockPathResultMockRecorder) GetTotalDelay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalDelay", reflect.TypeOf((*MockPathResult)(nil).GetTotalDelay))
}

// GetTotalJitter mocks base method.
func (m *MockPathResult) GetTotalJitter() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalJitter")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetTotalJitter indicates an expected call of GetTotalJitter.
func (mr *MockPathResultMockRecorder) GetTotalJitter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalJitter", reflect.TypeOf((*MockPathResult)(nil).GetTotalJitter))
}

// GetTotalPacketLoss mocks base method.
func (m *MockPathResult) GetTotalPacketLoss() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPacketLoss")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetTotalPacketLoss indicates an expected call of GetTotalPacketLoss.
func (mr *MockPathResultMockRecorder) GetTotalPacketLoss() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPacketLoss", reflect.TypeOf((*MockPathResult)(nil).GetTotalPacketLoss))
}

// Serialize mocks base method.
func (m *MockPathResult) Serialize() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize")
	ret0, _ := ret[0].(string)
	return ret0
}

// Serialize indicates an expected call of Serialize.
func (mr *MockPathResultMockRecorder) Serialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockPathResult)(nil).Serialize))
}

// SetBottleneckEdge mocks base method.
func (m *MockPathResult) SetBottleneckEdge(arg0 graph.Edge) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBottleneckEdge", arg0)
}

// SetBottleneckEdge indicates an expected call of SetBottleneckEdge.
func (mr *MockPathResultMockRecorder) SetBottleneckEdge(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBottleneckEdge", reflect.TypeOf((*MockPathResult)(nil).SetBottleneckEdge), arg0)
}

// SetBottleneckValue mocks base method.
func (m *MockPathResult) SetBottleneckValue(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBottleneckValue", arg0)
}

// SetBottleneckValue indicates an expected call of SetBottleneckValue.
func (mr *MockPathResultMockRecorder) SetBottleneckValue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBottleneckValue", reflect.TypeOf((*MockPathResult)(nil).SetBottleneckValue), arg0)
}

// SetRouterServiceMap mocks base method.
func (m *MockPathResult) SetRouterServiceMap(arg0 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRouterServiceMap", arg0)
}

// SetRouterServiceMap indicates an expected call of SetRouterServiceMap.
func (mr *MockPathResultMockRecorder) SetRouterServiceMap(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRouterServiceMap", reflect.TypeOf((*MockPathResult)(nil).SetRouterServiceMap), arg0)
}

// SetServiceSidList mocks base method.
func (m *MockPathResult) SetServiceSidList(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetServiceSidList", arg0)
}

// SetServiceSidList indicates an expected call of SetServiceSidList.
func (mr *MockPathResultMockRecorder) SetServiceSidList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceSidList", reflect.TypeOf((*MockPathResult)(nil).SetServiceSidList), arg0)
}

// SetTotalCost mocks base method.
func (m *MockPathResult) SetTotalCost(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTotalCost", arg0)
}

// SetTotalCost indicates an expected call of SetTotalCost.
func (mr *MockPathResultMockRecorder) SetTotalCost(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalCost", reflect.TypeOf((*MockPathResult)(nil).SetTotalCost), arg0)
}

// SetTotalDelay mocks base method.
func (m *MockPathResult) SetTotalDelay(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTotalDelay", arg0)
}

// SetTotalDelay indicates an expected call of SetTotalDelay.
func (mr *MockPathResultMockRecorder) SetTotalDelay(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalDelay", reflect.TypeOf((*MockPathResult)(nil).SetTotalDelay), arg0)
}

// SetTotalJitter mocks base method.
func (m *MockPathResult) SetTotalJitter(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTotalJitter", arg0)
}

// SetTotalJitter indicates an expected call of SetTotalJitter.
func (mr *MockPathResultMockRecorder) SetTotalJitter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalJitter", reflect.TypeOf((*MockPathResult)(nil).SetTotalJitter), arg0)
}

// SetTotalPacketLoss mocks base method.
func (m *MockPathResult) SetTotalPacketLoss(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTotalPacketLoss", arg0)
}

// SetTotalPacketLoss indicates an expected call of SetTotalPacketLoss.
func (mr *MockPathResultMockRecorder) SetTotalPacketLoss(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalPacketLoss", reflect.TypeOf((*MockPathResult)(nil).SetTotalPacketLoss), arg0)
}
