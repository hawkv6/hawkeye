// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source cache.go -destination cache_mock.go -package cache
//

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"

	domain "github.com/hawkv6/hawkeye/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// DoesServiceSidExist mocks base method.
func (m *MockCache) DoesServiceSidExist(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesServiceSidExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DoesServiceSidExist indicates an expected call of DoesServiceSidExist.
func (mr *MockCacheMockRecorder) DoesServiceSidExist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesServiceSidExist", reflect.TypeOf((*MockCache)(nil).DoesServiceSidExist), arg0)
}

// GetClientNetworkByKey mocks base method.
func (m *MockCache) GetClientNetworkByKey(arg0 string) domain.Prefix {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientNetworkByKey", arg0)
	ret0, _ := ret[0].(domain.Prefix)
	return ret0
}

// GetClientNetworkByKey indicates an expected call of GetClientNetworkByKey.
func (mr *MockCacheMockRecorder) GetClientNetworkByKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientNetworkByKey", reflect.TypeOf((*MockCache)(nil).GetClientNetworkByKey), arg0)
}

// GetNodeByIgpRouterId mocks base method.
func (m *MockCache) GetNodeByIgpRouterId(arg0 string) domain.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByIgpRouterId", arg0)
	ret0, _ := ret[0].(domain.Node)
	return ret0
}

// GetNodeByIgpRouterId indicates an expected call of GetNodeByIgpRouterId.
func (mr *MockCacheMockRecorder) GetNodeByIgpRouterId(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByIgpRouterId", reflect.TypeOf((*MockCache)(nil).GetNodeByIgpRouterId), arg0)
}

// GetNodeByKey mocks base method.
func (m *MockCache) GetNodeByKey(arg0 string) domain.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByKey", arg0)
	ret0, _ := ret[0].(domain.Node)
	return ret0
}

// GetNodeByKey indicates an expected call of GetNodeByKey.
func (mr *MockCacheMockRecorder) GetNodeByKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByKey", reflect.TypeOf((*MockCache)(nil).GetNodeByKey), arg0)
}

// GetRouterIdFromNetworkAddress mocks base method.
func (m *MockCache) GetRouterIdFromNetworkAddress(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterIdFromNetworkAddress", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRouterIdFromNetworkAddress indicates an expected call of GetRouterIdFromNetworkAddress.
func (mr *MockCacheMockRecorder) GetRouterIdFromNetworkAddress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterIdFromNetworkAddress", reflect.TypeOf((*MockCache)(nil).GetRouterIdFromNetworkAddress), arg0)
}

// GetServiceSids mocks base method.
func (m *MockCache) GetServiceSids(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceSids", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetServiceSids indicates an expected call of GetServiceSids.
func (mr *MockCacheMockRecorder) GetServiceSids(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceSids", reflect.TypeOf((*MockCache)(nil).GetServiceSids), arg0)
}

// GetSidByKey mocks base method.
func (m *MockCache) GetSidByKey(arg0 string) domain.Sid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSidByKey", arg0)
	ret0, _ := ret[0].(domain.Sid)
	return ret0
}

// GetSidByKey indicates an expected call of GetSidByKey.
func (mr *MockCacheMockRecorder) GetSidByKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSidByKey", reflect.TypeOf((*MockCache)(nil).GetSidByKey), arg0)
}

// GetSrAlgorithmSid mocks base method.
func (m *MockCache) GetSrAlgorithmSid(arg0 string, arg1 uint32) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSrAlgorithmSid", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSrAlgorithmSid indicates an expected call of GetSrAlgorithmSid.
func (mr *MockCacheMockRecorder) GetSrAlgorithmSid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSrAlgorithmSid", reflect.TypeOf((*MockCache)(nil).GetSrAlgorithmSid), arg0, arg1)
}

// Lock mocks base method.
func (m *MockCache) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockCacheMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockCache)(nil).Lock))
}

// RemoveClientNetwork mocks base method.
func (m *MockCache) RemoveClientNetwork(arg0 domain.Prefix) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveClientNetwork", arg0)
}

// RemoveClientNetwork indicates an expected call of RemoveClientNetwork.
func (mr *MockCacheMockRecorder) RemoveClientNetwork(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClientNetwork", reflect.TypeOf((*MockCache)(nil).RemoveClientNetwork), arg0)
}

// RemoveNode mocks base method.
func (m *MockCache) RemoveNode(node domain.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveNode", node)
}

// RemoveNode indicates an expected call of RemoveNode.
func (mr *MockCacheMockRecorder) RemoveNode(node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNode", reflect.TypeOf((*MockCache)(nil).RemoveNode), node)
}

// RemoveServiceSid mocks base method.
func (m *MockCache) RemoveServiceSid(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveServiceSid", arg0, arg1)
}

// RemoveServiceSid indicates an expected call of RemoveServiceSid.
func (mr *MockCacheMockRecorder) RemoveServiceSid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceSid", reflect.TypeOf((*MockCache)(nil).RemoveServiceSid), arg0, arg1)
}

// RemoveSid mocks base method.
func (m *MockCache) RemoveSid(arg0 domain.Sid) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveSid", arg0)
}

// RemoveSid indicates an expected call of RemoveSid.
func (mr *MockCacheMockRecorder) RemoveSid(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSid", reflect.TypeOf((*MockCache)(nil).RemoveSid), arg0)
}

// StoreClientNetwork mocks base method.
func (m *MockCache) StoreClientNetwork(arg0 domain.Prefix) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreClientNetwork", arg0)
}

// StoreClientNetwork indicates an expected call of StoreClientNetwork.
func (mr *MockCacheMockRecorder) StoreClientNetwork(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreClientNetwork", reflect.TypeOf((*MockCache)(nil).StoreClientNetwork), arg0)
}

// StoreNode mocks base method.
func (m *MockCache) StoreNode(node domain.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreNode", node)
}

// StoreNode indicates an expected call of StoreNode.
func (mr *MockCacheMockRecorder) StoreNode(node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNode", reflect.TypeOf((*MockCache)(nil).StoreNode), node)
}

// StoreServiceSid mocks base method.
func (m *MockCache) StoreServiceSid(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreServiceSid", arg0, arg1)
}

// StoreServiceSid indicates an expected call of StoreServiceSid.
func (mr *MockCacheMockRecorder) StoreServiceSid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreServiceSid", reflect.TypeOf((*MockCache)(nil).StoreServiceSid), arg0, arg1)
}

// StoreSid mocks base method.
func (m *MockCache) StoreSid(arg0 domain.Sid) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreSid", arg0)
}

// StoreSid indicates an expected call of StoreSid.
func (mr *MockCacheMockRecorder) StoreSid(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSid", reflect.TypeOf((*MockCache)(nil).StoreSid), arg0)
}

// Unlock mocks base method.
func (m *MockCache) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockCacheMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockCache)(nil).Unlock))
}
