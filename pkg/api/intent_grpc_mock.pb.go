// Code generated by MockGen. DO NOT EDIT.
// Source: intent_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source intent_grpc.pb.go -destination intent_grpc_mock.pb.go -package api
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockIntentControllerClient is a mock of IntentControllerClient interface.
type MockIntentControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockIntentControllerClientMockRecorder
}

// MockIntentControllerClientMockRecorder is the mock recorder for MockIntentControllerClient.
type MockIntentControllerClientMockRecorder struct {
	mock *MockIntentControllerClient
}

// NewMockIntentControllerClient creates a new mock instance.
func NewMockIntentControllerClient(ctrl *gomock.Controller) *MockIntentControllerClient {
	mock := &MockIntentControllerClient{ctrl: ctrl}
	mock.recorder = &MockIntentControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntentControllerClient) EXPECT() *MockIntentControllerClientMockRecorder {
	return m.recorder
}

// GetIntentPath mocks base method.
func (m *MockIntentControllerClient) GetIntentPath(ctx context.Context, opts ...grpc.CallOption) (IntentController_GetIntentPathClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntentPath", varargs...)
	ret0, _ := ret[0].(IntentController_GetIntentPathClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntentPath indicates an expected call of GetIntentPath.
func (mr *MockIntentControllerClientMockRecorder) GetIntentPath(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntentPath", reflect.TypeOf((*MockIntentControllerClient)(nil).GetIntentPath), varargs...)
}

// MockIntentController_GetIntentPathClient is a mock of IntentController_GetIntentPathClient interface.
type MockIntentController_GetIntentPathClient struct {
	ctrl     *gomock.Controller
	recorder *MockIntentController_GetIntentPathClientMockRecorder
}

// MockIntentController_GetIntentPathClientMockRecorder is the mock recorder for MockIntentController_GetIntentPathClient.
type MockIntentController_GetIntentPathClientMockRecorder struct {
	mock *MockIntentController_GetIntentPathClient
}

// NewMockIntentController_GetIntentPathClient creates a new mock instance.
func NewMockIntentController_GetIntentPathClient(ctrl *gomock.Controller) *MockIntentController_GetIntentPathClient {
	mock := &MockIntentController_GetIntentPathClient{ctrl: ctrl}
	mock.recorder = &MockIntentController_GetIntentPathClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntentController_GetIntentPathClient) EXPECT() *MockIntentController_GetIntentPathClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockIntentController_GetIntentPathClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockIntentController_GetIntentPathClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockIntentController_GetIntentPathClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockIntentController_GetIntentPathClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockIntentController_GetIntentPathClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockIntentController_GetIntentPathClient)(nil).Context))
}

// Header mocks base method.
func (m *MockIntentController_GetIntentPathClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockIntentController_GetIntentPathClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockIntentController_GetIntentPathClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockIntentController_GetIntentPathClient) Recv() (*PathResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*PathResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockIntentController_GetIntentPathClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockIntentController_GetIntentPathClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockIntentController_GetIntentPathClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockIntentController_GetIntentPathClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockIntentController_GetIntentPathClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockIntentController_GetIntentPathClient) Send(arg0 *PathRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIntentController_GetIntentPathClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIntentController_GetIntentPathClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockIntentController_GetIntentPathClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockIntentController_GetIntentPathClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockIntentController_GetIntentPathClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockIntentController_GetIntentPathClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockIntentController_GetIntentPathClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockIntentController_GetIntentPathClient)(nil).Trailer))
}

// MockIntentControllerServer is a mock of IntentControllerServer interface.
type MockIntentControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockIntentControllerServerMockRecorder
}

// MockIntentControllerServerMockRecorder is the mock recorder for MockIntentControllerServer.
type MockIntentControllerServerMockRecorder struct {
	mock *MockIntentControllerServer
}

// NewMockIntentControllerServer creates a new mock instance.
func NewMockIntentControllerServer(ctrl *gomock.Controller) *MockIntentControllerServer {
	mock := &MockIntentControllerServer{ctrl: ctrl}
	mock.recorder = &MockIntentControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntentControllerServer) EXPECT() *MockIntentControllerServerMockRecorder {
	return m.recorder
}

// GetIntentPath mocks base method.
func (m *MockIntentControllerServer) GetIntentPath(arg0 IntentController_GetIntentPathServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntentPath", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetIntentPath indicates an expected call of GetIntentPath.
func (mr *MockIntentControllerServerMockRecorder) GetIntentPath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntentPath", reflect.TypeOf((*MockIntentControllerServer)(nil).GetIntentPath), arg0)
}

// mustEmbedUnimplementedIntentControllerServer mocks base method.
func (m *MockIntentControllerServer) mustEmbedUnimplementedIntentControllerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIntentControllerServer")
}

// mustEmbedUnimplementedIntentControllerServer indicates an expected call of mustEmbedUnimplementedIntentControllerServer.
func (mr *MockIntentControllerServerMockRecorder) mustEmbedUnimplementedIntentControllerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIntentControllerServer", reflect.TypeOf((*MockIntentControllerServer)(nil).mustEmbedUnimplementedIntentControllerServer))
}

// MockUnsafeIntentControllerServer is a mock of UnsafeIntentControllerServer interface.
type MockUnsafeIntentControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeIntentControllerServerMockRecorder
}

// MockUnsafeIntentControllerServerMockRecorder is the mock recorder for MockUnsafeIntentControllerServer.
type MockUnsafeIntentControllerServerMockRecorder struct {
	mock *MockUnsafeIntentControllerServer
}

// NewMockUnsafeIntentControllerServer creates a new mock instance.
func NewMockUnsafeIntentControllerServer(ctrl *gomock.Controller) *MockUnsafeIntentControllerServer {
	mock := &MockUnsafeIntentControllerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeIntentControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeIntentControllerServer) EXPECT() *MockUnsafeIntentControllerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedIntentControllerServer mocks base method.
func (m *MockUnsafeIntentControllerServer) mustEmbedUnimplementedIntentControllerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIntentControllerServer")
}

// mustEmbedUnimplementedIntentControllerServer indicates an expected call of mustEmbedUnimplementedIntentControllerServer.
func (mr *MockUnsafeIntentControllerServerMockRecorder) mustEmbedUnimplementedIntentControllerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIntentControllerServer", reflect.TypeOf((*MockUnsafeIntentControllerServer)(nil).mustEmbedUnimplementedIntentControllerServer))
}

// MockIntentController_GetIntentPathServer is a mock of IntentController_GetIntentPathServer interface.
type MockIntentController_GetIntentPathServer struct {
	ctrl     *gomock.Controller
	recorder *MockIntentController_GetIntentPathServerMockRecorder
}

// MockIntentController_GetIntentPathServerMockRecorder is the mock recorder for MockIntentController_GetIntentPathServer.
type MockIntentController_GetIntentPathServerMockRecorder struct {
	mock *MockIntentController_GetIntentPathServer
}

// NewMockIntentController_GetIntentPathServer creates a new mock instance.
func NewMockIntentController_GetIntentPathServer(ctrl *gomock.Controller) *MockIntentController_GetIntentPathServer {
	mock := &MockIntentController_GetIntentPathServer{ctrl: ctrl}
	mock.recorder = &MockIntentController_GetIntentPathServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntentController_GetIntentPathServer) EXPECT() *MockIntentController_GetIntentPathServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockIntentController_GetIntentPathServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockIntentController_GetIntentPathServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockIntentController_GetIntentPathServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockIntentController_GetIntentPathServer) Recv() (*PathRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*PathRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockIntentController_GetIntentPathServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockIntentController_GetIntentPathServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockIntentController_GetIntentPathServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockIntentController_GetIntentPathServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockIntentController_GetIntentPathServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockIntentController_GetIntentPathServer) Send(arg0 *PathResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIntentController_GetIntentPathServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIntentController_GetIntentPathServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockIntentController_GetIntentPathServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockIntentController_GetIntentPathServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockIntentController_GetIntentPathServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockIntentController_GetIntentPathServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockIntentController_GetIntentPathServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockIntentController_GetIntentPathServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockIntentController_GetIntentPathServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockIntentController_GetIntentPathServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockIntentController_GetIntentPathServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockIntentController_GetIntentPathServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockIntentController_GetIntentPathServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockIntentController_GetIntentPathServer)(nil).SetTrailer), arg0)
}
