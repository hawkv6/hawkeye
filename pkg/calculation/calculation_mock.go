// Code generated by MockGen. DO NOT EDIT.
// Source: calculation.go
//
// Generated by this command:
//
//	mockgen -source calculation.go -destination calculation_mock.go -package calculation
//

// Package calculation is a generated GoMock package.
package calculation

import (
	reflect "reflect"

	graph "github.com/hawkv6/hawkeye/pkg/graph"
	gomock "go.uber.org/mock/gomock"
)

// MockCalculation is a mock of Calculation interface.
type MockCalculation struct {
	ctrl     *gomock.Controller
	recorder *MockCalculationMockRecorder
}

// MockCalculationMockRecorder is the mock recorder for MockCalculation.
type MockCalculationMockRecorder struct {
	mock *MockCalculation
}

// NewMockCalculation creates a new mock instance.
func NewMockCalculation(ctrl *gomock.Controller) *MockCalculation {
	mock := &MockCalculation{ctrl: ctrl}
	mock.recorder = &MockCalculationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculation) EXPECT() *MockCalculationMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCalculation) Execute() (graph.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(graph.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCalculationMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCalculation)(nil).Execute))
}
