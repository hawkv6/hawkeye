// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source manager.go -destination manager_mock.go -package calculation
//

// Package calculation is a generated GoMock package.
package calculation

import (
	reflect "reflect"

	domain "github.com/hawkv6/hawkeye/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CalculateBestPath mocks base method.
func (m *MockManager) CalculateBestPath(arg0 domain.PathRequest) (domain.PathResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateBestPath", arg0)
	ret0, _ := ret[0].(domain.PathResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateBestPath indicates an expected call of CalculateBestPath.
func (mr *MockManagerMockRecorder) CalculateBestPath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateBestPath", reflect.TypeOf((*MockManager)(nil).CalculateBestPath), arg0)
}

// CalculatePathUpdate mocks base method.
func (m *MockManager) CalculatePathUpdate(arg0 domain.StreamSession) (domain.PathResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculatePathUpdate", arg0)
	ret0, _ := ret[0].(domain.PathResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculatePathUpdate indicates an expected call of CalculatePathUpdate.
func (mr *MockManagerMockRecorder) CalculatePathUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePathUpdate", reflect.TypeOf((*MockManager)(nil).CalculatePathUpdate), arg0)
}
