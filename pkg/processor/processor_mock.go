// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go
//
// Generated by this command:
//
//	mockgen -source processor.go -destination processor_mock.go -package processor
//

// Package processor is a generated GoMock package.
package processor

import (
	reflect "reflect"

	domain "github.com/hawkv6/hawkeye/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// ProcessLinks mocks base method.
func (m *MockProcessor) ProcessLinks(arg0 []domain.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLinks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessLinks indicates an expected call of ProcessLinks.
func (mr *MockProcessorMockRecorder) ProcessLinks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLinks", reflect.TypeOf((*MockProcessor)(nil).ProcessLinks), arg0)
}

// ProcessNodes mocks base method.
func (m *MockProcessor) ProcessNodes(arg0 []domain.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessNodes", arg0)
}

// ProcessNodes indicates an expected call of ProcessNodes.
func (mr *MockProcessorMockRecorder) ProcessNodes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNodes", reflect.TypeOf((*MockProcessor)(nil).ProcessNodes), arg0)
}

// ProcessPrefixes mocks base method.
func (m *MockProcessor) ProcessPrefixes(arg0 []domain.Prefix) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessPrefixes", arg0)
}

// ProcessPrefixes indicates an expected call of ProcessPrefixes.
func (mr *MockProcessorMockRecorder) ProcessPrefixes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPrefixes", reflect.TypeOf((*MockProcessor)(nil).ProcessPrefixes), arg0)
}

// ProcessSids mocks base method.
func (m *MockProcessor) ProcessSids(arg0 []domain.Sid) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessSids", arg0)
}

// ProcessSids indicates an expected call of ProcessSids.
func (mr *MockProcessorMockRecorder) ProcessSids(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSids", reflect.TypeOf((*MockProcessor)(nil).ProcessSids), arg0)
}

// Start mocks base method.
func (m *MockProcessor) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockProcessorMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProcessor)(nil).Start))
}

// Stop mocks base method.
func (m *MockProcessor) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockProcessorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProcessor)(nil).Stop))
}

// MockNodeProcessor is a mock of NodeProcessor interface.
type MockNodeProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockNodeProcessorMockRecorder
}

// MockNodeProcessorMockRecorder is the mock recorder for MockNodeProcessor.
type MockNodeProcessorMockRecorder struct {
	mock *MockNodeProcessor
}

// NewMockNodeProcessor creates a new mock instance.
func NewMockNodeProcessor(ctrl *gomock.Controller) *MockNodeProcessor {
	mock := &MockNodeProcessor{ctrl: ctrl}
	mock.recorder = &MockNodeProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeProcessor) EXPECT() *MockNodeProcessorMockRecorder {
	return m.recorder
}

// ProcessNodes mocks base method.
func (m *MockNodeProcessor) ProcessNodes(arg0 []domain.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessNodes", arg0)
}

// ProcessNodes indicates an expected call of ProcessNodes.
func (mr *MockNodeProcessorMockRecorder) ProcessNodes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNodes", reflect.TypeOf((*MockNodeProcessor)(nil).ProcessNodes), arg0)
}

// MockLinkProcessor is a mock of LinkProcessor interface.
type MockLinkProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockLinkProcessorMockRecorder
}

// MockLinkProcessorMockRecorder is the mock recorder for MockLinkProcessor.
type MockLinkProcessorMockRecorder struct {
	mock *MockLinkProcessor
}

// NewMockLinkProcessor creates a new mock instance.
func NewMockLinkProcessor(ctrl *gomock.Controller) *MockLinkProcessor {
	mock := &MockLinkProcessor{ctrl: ctrl}
	mock.recorder = &MockLinkProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkProcessor) EXPECT() *MockLinkProcessorMockRecorder {
	return m.recorder
}

// ProcessLinks mocks base method.
func (m *MockLinkProcessor) ProcessLinks(arg0 []domain.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLinks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessLinks indicates an expected call of ProcessLinks.
func (mr *MockLinkProcessorMockRecorder) ProcessLinks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLinks", reflect.TypeOf((*MockLinkProcessor)(nil).ProcessLinks), arg0)
}

// MockPrefixProcessor is a mock of PrefixProcessor interface.
type MockPrefixProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockPrefixProcessorMockRecorder
}

// MockPrefixProcessorMockRecorder is the mock recorder for MockPrefixProcessor.
type MockPrefixProcessorMockRecorder struct {
	mock *MockPrefixProcessor
}

// NewMockPrefixProcessor creates a new mock instance.
func NewMockPrefixProcessor(ctrl *gomock.Controller) *MockPrefixProcessor {
	mock := &MockPrefixProcessor{ctrl: ctrl}
	mock.recorder = &MockPrefixProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrefixProcessor) EXPECT() *MockPrefixProcessorMockRecorder {
	return m.recorder
}

// ProcessPrefixes mocks base method.
func (m *MockPrefixProcessor) ProcessPrefixes(arg0 []domain.Prefix) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessPrefixes", arg0)
}

// ProcessPrefixes indicates an expected call of ProcessPrefixes.
func (mr *MockPrefixProcessorMockRecorder) ProcessPrefixes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPrefixes", reflect.TypeOf((*MockPrefixProcessor)(nil).ProcessPrefixes), arg0)
}

// MockSidProcessor is a mock of SidProcessor interface.
type MockSidProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockSidProcessorMockRecorder
}

// MockSidProcessorMockRecorder is the mock recorder for MockSidProcessor.
type MockSidProcessorMockRecorder struct {
	mock *MockSidProcessor
}

// NewMockSidProcessor creates a new mock instance.
func NewMockSidProcessor(ctrl *gomock.Controller) *MockSidProcessor {
	mock := &MockSidProcessor{ctrl: ctrl}
	mock.recorder = &MockSidProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidProcessor) EXPECT() *MockSidProcessorMockRecorder {
	return m.recorder
}

// ProcessSids mocks base method.
func (m *MockSidProcessor) ProcessSids(arg0 []domain.Sid) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessSids", arg0)
}

// ProcessSids indicates an expected call of ProcessSids.
func (mr *MockSidProcessorMockRecorder) ProcessSids(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSids", reflect.TypeOf((*MockSidProcessor)(nil).ProcessSids), arg0)
}
