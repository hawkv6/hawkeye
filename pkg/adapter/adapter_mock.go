// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go
//
// Generated by this command:
//
//	mockgen -source adapter.go -destination adapter_mock.go -package adapter
//

// Package adapter is a generated GoMock package.
package adapter

import (
	context "context"
	reflect "reflect"

	api "github.com/hawkv6/hawkeye/pkg/api"
	domain "github.com/hawkv6/hawkeye/pkg/domain"
	jagw "github.com/jalapeno-api-gateway/jagw-go/jagw"
	gomock "go.uber.org/mock/gomock"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// ConvertLink mocks base method.
func (m *MockAdapter) ConvertLink(arg0 *jagw.LsLink) (domain.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertLink", arg0)
	ret0, _ := ret[0].(domain.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertLink indicates an expected call of ConvertLink.
func (mr *MockAdapterMockRecorder) ConvertLink(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertLink", reflect.TypeOf((*MockAdapter)(nil).ConvertLink), arg0)
}

// ConvertLinkEvent mocks base method.
func (m *MockAdapter) ConvertLinkEvent(arg0 *jagw.LsLinkEvent) (domain.NetworkEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertLinkEvent", arg0)
	ret0, _ := ret[0].(domain.NetworkEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertLinkEvent indicates an expected call of ConvertLinkEvent.
func (mr *MockAdapterMockRecorder) ConvertLinkEvent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertLinkEvent", reflect.TypeOf((*MockAdapter)(nil).ConvertLinkEvent), arg0)
}

// ConvertNode mocks base method.
func (m *MockAdapter) ConvertNode(arg0 *jagw.LsNode) (domain.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertNode", arg0)
	ret0, _ := ret[0].(domain.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertNode indicates an expected call of ConvertNode.
func (mr *MockAdapterMockRecorder) ConvertNode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertNode", reflect.TypeOf((*MockAdapter)(nil).ConvertNode), arg0)
}

// ConvertNodeEvent mocks base method.
func (m *MockAdapter) ConvertNodeEvent(arg0 *jagw.LsNodeEvent) (domain.NetworkEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertNodeEvent", arg0)
	ret0, _ := ret[0].(domain.NetworkEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertNodeEvent indicates an expected call of ConvertNodeEvent.
func (mr *MockAdapterMockRecorder) ConvertNodeEvent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertNodeEvent", reflect.TypeOf((*MockAdapter)(nil).ConvertNodeEvent), arg0)
}

// ConvertPathRequest mocks base method.
func (m *MockAdapter) ConvertPathRequest(arg0 *api.PathRequest, arg1 api.IntentController_GetIntentPathServer, arg2 context.Context) (domain.PathRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertPathRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.PathRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertPathRequest indicates an expected call of ConvertPathRequest.
func (mr *MockAdapterMockRecorder) ConvertPathRequest(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertPathRequest", reflect.TypeOf((*MockAdapter)(nil).ConvertPathRequest), arg0, arg1, arg2)
}

// ConvertPathResult mocks base method.
func (m *MockAdapter) ConvertPathResult(arg0 domain.PathResult) (*api.PathResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertPathResult", arg0)
	ret0, _ := ret[0].(*api.PathResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertPathResult indicates an expected call of ConvertPathResult.
func (mr *MockAdapterMockRecorder) ConvertPathResult(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertPathResult", reflect.TypeOf((*MockAdapter)(nil).ConvertPathResult), arg0)
}

// ConvertPrefix mocks base method.
func (m *MockAdapter) ConvertPrefix(arg0 *jagw.LsPrefix) (domain.Prefix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertPrefix", arg0)
	ret0, _ := ret[0].(domain.Prefix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertPrefix indicates an expected call of ConvertPrefix.
func (mr *MockAdapterMockRecorder) ConvertPrefix(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertPrefix", reflect.TypeOf((*MockAdapter)(nil).ConvertPrefix), arg0)
}

// ConvertPrefixEvent mocks base method.
func (m *MockAdapter) ConvertPrefixEvent(arg0 *jagw.LsPrefixEvent) (domain.NetworkEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertPrefixEvent", arg0)
	ret0, _ := ret[0].(domain.NetworkEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertPrefixEvent indicates an expected call of ConvertPrefixEvent.
func (mr *MockAdapterMockRecorder) ConvertPrefixEvent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertPrefixEvent", reflect.TypeOf((*MockAdapter)(nil).ConvertPrefixEvent), arg0)
}

// ConvertSid mocks base method.
func (m *MockAdapter) ConvertSid(arg0 *jagw.LsSrv6Sid) (domain.Sid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertSid", arg0)
	ret0, _ := ret[0].(domain.Sid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertSid indicates an expected call of ConvertSid.
func (mr *MockAdapterMockRecorder) ConvertSid(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertSid", reflect.TypeOf((*MockAdapter)(nil).ConvertSid), arg0)
}

// ConvertSidEvent mocks base method.
func (m *MockAdapter) ConvertSidEvent(arg0 *jagw.LsSrv6SidEvent) (domain.NetworkEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertSidEvent", arg0)
	ret0, _ := ret[0].(domain.NetworkEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertSidEvent indicates an expected call of ConvertSidEvent.
func (mr *MockAdapterMockRecorder) ConvertSidEvent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertSidEvent", reflect.TypeOf((*MockAdapter)(nil).ConvertSidEvent), arg0)
}
